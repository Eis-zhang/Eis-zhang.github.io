<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java内存区域]]></title>
    <url>%2F2018%2F08%2F20%2Fjava%E5%86%85%E5%AD%98%2F</url>
    <content type="text"><![CDATA[运行时数据区域​ Java虚拟机在执行Java程序的过程中会把他所管理的内存划分为若干个不同的数据区域。包括以下几个： 程序计数器​ 程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取吓一跳需要执行的字节码命令。 ​ 由于java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。因此为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为”线程私有“的内存。 Java虚拟机栈​ java虚拟机栈也是线程私有的，他的生命周期与线程相同。 ​ 虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。 ​ java内存区的一个经典分组是将内存区分为堆内存和栈内存，其中栈就是指现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。 ​ 执行引擎运行的所有字节码指令只针对当前栈帧进行操作，在概念模型上，典型的栈帧结构如图所示： 局部变量表​ 它存放了编译器可知的各种基本数据类型（boolean,byte,char,short,int,float,long,double）、对象引用（reference类型，他不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型。 ​ 其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。 抛出的异常​ java虚拟机规范中，对这个区域规定了两种异常状况： ​ 1.如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常 ​ 2.如果虚拟机栈可以动态扩展（当前大部分的java虚拟机都可以动态扩展，只不过java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。 本地方法栈​ 本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，他们之间的区别在于： ​ 虚拟机栈为虚拟机执行java方法（也就是字节码）服务 ​ 本地方法栈位虚拟机使用到的Native方法服务 ​ 在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构都没有强制规定，因此具体的虚拟机可以自由实现它。它与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemeoryError异常。 Java堆​ Java堆（Java Heap）是被所有线程共享的一块内存区域，在虚拟机启动时创建。而对于大多数应用来说，Java堆是Java虚拟机所管理的内存中最大的一块。对于Java堆而言，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存，而对于这一点Java虚拟机规范中的描述是： ​ 所有的对象实例以及数组都在这里分配内存 但是随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么绝对了。 ​ Java堆同时还是垃圾收集器管理的主要区域，因此很多时候也被称作”GC堆”(Garbage Collected Heap)。 从内存回收的角度来看，由于现在的收集器基本都采用分代收集算法，所以Java堆还可分为：新生代和老年代，更细致的可有Eden空间，FromSurvivor空间、ToSuvivor空间等。 从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Alllcation Buffer)。不管如何划分，都与存放内容无关，无论哪个区域，存放的都是对象实例，进一步划分的目的是为了更好的回收内存，或者更快地分配内存。 抛出的异常​ 根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，在实现时，既可以实现成固定大小的，也可以是可扩展的，当前主流的虚拟机都是按照可扩展的来实现的，如果对中没有内存完成实例分配，并且对也无法在扩展时，将会派出OutOfMemoryError异常。 方法区​ 方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，他用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范吧方法去描述为堆的一个逻辑部分，但是它却有一个别名叫作Non-Heap（非堆），目的应该是与Java堆区分开来。 ​ 原理上，如何实现方法去属于虚拟机实现细节，不受虚拟机规范约束，但是用永久带来实现方法区就现在而言并不是一个好主意，因为这样更容易遇上内存溢出问题（永久代有 -XX:MaxPermSize的上限，J9和JRockit只要没有触碰到进程可用的内存上限，例如32位系统中的4GB，就不会出现问题），而且有极少数方法（如String.intern()）会因为这个原因导致不同虚拟机下有不同的表现。 ​ Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法去就如永久代的名字一样”永久“存在了。这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的而回收成绩比较难以令人满意，有意识类型的卸载，条件相当苛刻，但是这部分区域的回收又确实是必要的。 抛出的异常​ 当方法区无法满足内存分配的需求时，将派出OutOfMemoryError异常。 运行时常量池​ 运行时常量池(Runtime Constant Pool)是方法区的一部分。Class文件中除了又累的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法去的运行时常量池中存放。 ​ Java虚拟机对于Class文件每一部分的格式都有严格规定，每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行，但对于运行时常量池，Java虚拟机没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个区域。不过一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。 ​ 运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法去运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的是String类的intern方法 抛出的异常​ 既然运行时常量池是方法区的一部分，自然受到方法去内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。 直接内存​ 直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁的使用，而且也可能导致OutOfMemoryError异常的出现。故一起摆出。 ​ JDK1.4中加入的NIO类，引入了一种基于通道（Channel）和缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆来回复制数据。 ​ 显然，本机直接内存的分配不会受到java堆的影响，但其也是内存，肯定还是会受到本机总内存大小以及处理器寻址空间的限制。服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现OutOfMemoryError异常。]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇文章]]></title>
    <url>%2F2018%2F08%2F18%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[来写点东西吧 终于搞定了我的天]]></content>
      <categories>
        <category>个人生活</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
